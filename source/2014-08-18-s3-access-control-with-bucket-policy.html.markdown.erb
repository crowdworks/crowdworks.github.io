---
title: Amazon S3で特定のIPアドレスからのみアクセスできる静的サイトをつくる
date: 2014-08-18 11:00 JST
tags:
  - aws
  - s3
  - middleman
gravatar: ykuoka@gmail.com
author: Yusuke Kuoka
twitter_id: mumoshu
ogp:
  og:
    image:
      '': http://engineer.crowdworks.jp/images/aws.png
      type: image/png
      width: 300
      height: 122
atom:
  image:
    url: http://engineer.crowdworks.jp/images/aws.png
    type: image/png
---

<%= image_tag 'aws.png', class: 'article__body__image_left_30' %>
Amazon S3のBucketに、アクセス元IPアドレスによるアクセスコントロールをかけられる、ってご存知でしたか？

Bucketに入れるオブジェクトの機密性によっては、
「認証情報をつける」以外の方法でアクセスコントロールができると、応用が広がります。
例えば、機密でもなんでもないファイルや静的サイトを、ロケーション的に同じオフィスにいる人にゆるく共有したい、
くらいの用途であれば、アクセス元IPアドレスが使えることがあります。

この記事では、AWSやS3のリクエスト認証の概要と、それを踏まえた「アクセス元IPアドレスによるBucketへのアクセスコントロール」の方法をご紹介します。

なお、情報セキュリティに関わることなので、利用箇所には注意してください！！

READMORE

<%= table_of_contents(current_page) %>

## S3リソースへのアクセス方法

Amazon S3で作成したBucketやオブジェクトにはHTTPでアクセスできます。

例えば、

1. AWS SDKやREST APIでアクセスして、アプリのファイルストレージとして使う
2. S3が払い出すオブジェクトのURLを共有して、ファイル共有に使う
3. Static Website Hostingを有効化して、独自ドメインを割り当てて静的サイトとして公開、Webブラウザからアクセスする

いずれのケースでも、BucketやオブジェクトにアクセスするときはHTTPを話します。

## AWSのリクエスト認証

S3を含むAWSリソースにアクセスするときは、基本的に、HTTPリクエストに認証情報を含めておかないとアクセス拒否されます。
初期状態では「AWSのルートアカウント」や「バケットを作成したIAMユーザ[^1] に対してフルアクセスの権限がついているので、
そのどちらかの認証情報をつければ読み書き等の操作が行えます。

認証情報の内容は、2014年8月現在は[「Authenticating Requests (AWS Signature Version 4)」](http://docs.aws.amazon.com/AmazonS3/latest/API/sig-v4-authenticating-requests.html)の通りです。
具体的には、コンテンツとシークレットアクセスキーなどを元にした署名を含むAuthorizationヘッダをHTTPリクエストに含めたりします。

試しに、Bucketを作成して、適当なファイルを設置して、curlやブラウザで該当するS3オブジェクトのURLにアクセスしてみると、403 FORBIDDENになりますね。

AWS SDK、S3に対応したファイル転送ソフト、ブラウザ拡張などは、アクセスキーID・シークレットキー等を元に認証情報を計算してくれています。
「認証情報」を計算できないブラウザ等から普通にアクセスすると、拒否されます。

この記事の趣旨は、特定のIPアドレスからは認証情報なしでアクセスできるようにすることです。
そうすると、「認証情報」を計算できないブラウザからも普通にアクセスできるようになります。

[^1]: S3の仕様としてそうなのかどうか、確かなドキュメントが見つけられませんでした。見つけた方は教えていただけると嬉しいです！

## IPアドレスによるアクセス制限の利用イメージ

例として、「機密情報を含まない静的Webサイトを共有してフィードバックを受けたい」場合の利用イメージを考えてみましょう。

対象サイトは機密情報を含まないので、

* 情報セキュリティ的には全公開してしまって問題ない [^2]
* しかし、今の段階ではお目汚しになるかもしれないのでユーザさんにお見せしたくはない
* 権限がある人だけは普段使っているブラウザで見られるようにしたい

[^2]: そもそも機密情報がうっかり含まれないようにする施策は行っている前提で！

と判断したとします。

こういった目的でアクセスコントロールをするなら、アクセス元IPアドレスによるアクセス制限が使えます。

IPアドレスによるアクセス制限は、AWS Consoleから簡単にかけられます。

## BEFORE: アクセス拒否されることのテスト

まず、Bucketに変更を加える前に、まずこの記事でご紹介するIPアドレスによるアクセスコントロールを行っていない状態ではどうなるのか、確認しておきましょう。
変更後に、また同じ手順でアクセスができることを確認します。

Amazon S3のBucketに保存されたオブジェクトには、以下のようなURLでアクセスできます。

```
$ curl https://s3-ap-northeast-1.amazonaws.com/<bucket-name>/<object-name>
```

認証情報を含まないHTTP GETリクエストを送ってみると、以下のように403 FORBIDDENです。

```
$ curl https://s3-ap-northeast-1.amazonaws.com/<bucket-name>/<object-name> -w "\n\nStatus: %{http_code}\n"
<?xml version="1.0" encoding="UTF-8"?>
<Error><Code>AccessDenied</Code><Message>Access Denied</Message><RequestId>9BC0BE23385EBA9F</RequestId><HostId>wMa4ISfdmJkRtWepZUiPIuSH8A3NebIqfR0jjFAwhN1svtT4FF72/DdPKED+rdgm</HostId></Error>

Status: 403
```

前述のとおり、Amazon S3でBucketを作成すると、初期状態ではルートアカウントやBucketを作成したIAMユーザにフルアクセスの権限がついているはずです。
したがって、このように403 FORBIDDENとなるのが正しい挙動です。

セキュアでいいですね。
しかし、用途によってはもっと緩いアクセス制限にしたい、その一つの方法としてアクセス元IPアドレスを使う、というのがこの記事の趣旨です。

## Bucket Policyの設定

アクセス元IPアドレスによるアクセスコントロールを行うためには、Bucket Policyを変更します。

Bucket Policyは、S3リソースに誰がアクセスできるかというルールを、
Access Policy LanguageというJSONベースの言語で記述したものです。

Bucket Policyの詳細については S3のドキュメント ["Using Bucket Policies and User Policies"](http://docs.aws.amazon.com/AmazonS3/latest/dev/using-iam-policies.html) を参照してください。

AWSコンソールで該当のBucketのPropertiesを開きます。
「Add bucket policy」をクリックします。

<%= image_tag 'aws-s3-bucket-policy.png' %>

開いたダイアログに以下のJSONを入力して、Saveをクリックします。
JSON中の`<UNIQUE_ID>`と`<IP/CIDR>`はそれぞれユニークなIDと`IPアドレス/32`のような`IPアドレス/CIDRブロック`に変更してください。

<script src="https://gist.github.com/mumoshu/15a5a15a7d3c44ec8530.js"></script>

このBucket Policyに登場する要素はそれぞれ以下の意味があります。

| 要素名(JSONPathで) | 説明 |
| ----------------- | --- |
| `/Statement/` | Bucket Policyの構成要素です。最低限、誰が(Principal)、どのAWSリソース(Resource)に対して、何をしようとしたとき(Action)、それを許可/拒否するか(Effect)という情報を含みます。 |
| `/Statement/Condition/` | Statementが適用される条件です。Condition中では様々な条件分岐を書くことができます。例えば、S3の場合、「オブジェクトキー |
| `/Statement/Condition/IpAddress/aws:SourceIp` | アクセス許可（ホワイトリスト） |
| `/Statement/Condition/NotIpAddress/aws:SourceIp` | アクセス拒否（ブラックリスト） |

<% content_for :scripts do %>
  <script>
    $(".article-body table").addClass("table");
  </script>
<% end %>

Access Policy Languageの詳細については、 S3のドキュメント["Access Policy Language Overview"](http://docs.aws.amazon.com/AmazonS3/latest/dev/access-policy-language-overview.html)を参照してください。

## AFTER: アクセス許可されることのテスト

以下のように認証情報なしでHTTP GETしたとき、アクセス許可されているIPアドレスからなら200 OK、それ以外なら403 FORBIDDENになれば成功です。
ブラウザからアクセスした場合も同様ですね。

```
$ curl https://s3-ap-northeast-1.amazonaws.com/<bucket-name>/<object-name>`
```

## 保守的なBucket Policy

なお、ご紹介したBucket Policyは念のため保守的に、
「デフォルトが拒否・許可にかかわらず、指定したIPアドレス/CDIRブロック内ならアクセス許可、それ以外なら拒否」となるようにしています。

わざわざ保守的にしている理由は、皆さんの環境でデフォルト許可・拒否のどちらになっていたとしても、
アクセス元IPアドレスでアクセスコントロールが効くようにするためです。

実は、今回変更するBucket Policy以外にも、IAMポリシーやBucketのPermissionsの組み合わせ次第で、
かなり柔軟にS3へのアクセスコントロールを行うができます。

「デフォルトで拒否」になっていれば、
バケットポリシーでは「許可するIPアドレス/CIDRブロックのリスト（＝ホワイトリスト）」を設定するだけでOKです。

または「デフォルトで許可」になっていれば、
バケットポリシーでは「拒否するIPアドレス/CIDRブロックのリスト（＝ブラックリスト）」を設定するだけでOKです。

例えば、以下のようにBucketに対してEveryoneユーザへのOpen/Download権限がついていると、
認証不要でだれでもHTTP GETでアクセスできてしまいます。つまり、「デフォルト許可」の状態です。
言われてみれば当たり前の話だとは思いますが、この状態でホワイトリストの設定をしても、認証不要でだれでもアクセスできることに変わりはありません。
保守的なBucket Policyにしておけば、この状態でもアクセス元IPアドレスによるアクセスコントロールが有効になります。
個人的には、全公開にする予定がないなら、EveryoneへのPermissionは削除してしまいます。

<%= image_tag 's3-remove-everyones-permission.png' %>

皆さんの環境次第で、ホワイトリストやブラックリストのどちらかだけを利用していただいてもOKですし、
間違いがないようにこのまま保守的な設定にしておいても良いでしょう。

## 応用例: アクセス元IPで閲覧許可、ユーザ名で更新許可

このBucket Policyの応用は色々考えられますが、例えば

* 特定のIAMユーザが更新可能
* あるアクセス元IPアドレスからは閲覧可能
* その他はアクセス拒否

といった設定ができます。

実際、このブログのテスト環境では、Middlemanでビルドした静的サイトをS3 Bucketへデプロイしています。
そのために、以下の様なBucket Policyを設定しています。

* WerckerからS3へのデプロイを許可 (Wercker用のIAMユーザを作成して、そのユーザからS3へのファイルアップロード許可)
* 社内からは認証情報なしで閲覧許可
* 社外からのアクセスは拒否

<script src="https://gist.github.com/mumoshu/356563c3f25ab2f9b0e6.js"></script>

## まとめ

この記事では、AWSやS3のリクエスト認証の概要と、Amazon S3のBucketにアクセス元IPアドレスによるアクセスコントロールを行う方法をご説明しました。
機密性がない情報を、ロケーション的に近い人に共有する、というようなゆるいアクセスコントロールが必要な場合にご検討ください！
