---
title: (仮称) 秘伝のインフラをChef化する
date: 2014-07-17 10:56 JST
tags:
---

こんにちは、クラウドワークスの九岡です。

弊社のインフラを徐々にChefに移行しています。
つい先日、一部の本番サーバを実際にChefで構築したものに置き換えるところまで無事やり遂げたので、
このあたりで振り返りをしておきたいと思います。
これからChefを導入したい、という方はぜひ参考にしてください！

弊社はインフラとして全面的にAWSを利用しています。

社名と同じクラウドソーシングサービスである[クラウドワークス](http://crowdworks.jp)は、

- Railsアプリ on Amazon EC2
- MySQL on Amazon RDS
- 小サービス毎にAmazon VPCでネットワークを分離
- DNSはAmazon Route 53
- ロードバランサはELB

という構成になっています。
クラウドワークスのエンジニアが行うのは、

- Railsアプリの開発
- EC2インスタンスの設定(インスタンスレベル・OSレベル)
- MySQLの設定
- VPCの設定
- Route 53の設定
- ...

という感じで、主に「開発や設定」という業務です。
サーバの物理的な構築や運用からは（当然ですが）解放されていて、その上で「開発や設定」が私たちのコア領域です。
そこをいかに効率化できるか、というのが私たちが注力するポイントです。

さて、サーバの物理的な運用からは解放されている私たちですが、これまでは起動したEC2インスタンスの「OSレベル」での設定は人力で行っていました。
例えば、以下のようなことは手作業で行っていました。

- ユーザの管理
- パッケージのインストール・設定
- アプリケーションのデプロイ準備(パーミッションの変更その他)

属人化を極力避けるために、これらの作業履歴はコンフルエンスにまとめ、作業を行う都度ChatWork上で周知する、というようなことは継続的に行っていました。
しかし、サービスの運営が続く（ありがたいことです）につれて、作業履歴の追記もれ・経緯や作業目的の忘却・それによるサーバの「秘伝のタレ化」が進んでいて、
実際筆者が入社してそれまでなかった「ステージング環境」をつくろうとしたところ、以下の問題に直面しました。

- 「作業履歴」はあるが、それに抜け漏れがあるのかないのか簡単に確かめるすべがない
- 何のために何が必要なのか、そもそもの設定の目的と要件が不明

結局、弊社のRailsアプリの動作環境をすべて調べ直して、必要なパッケージをインストールし、アプリケーションが暗黙的に依存しているミドルウェアの設定(DBやメールサーバ、ユーザやディレクトリの権限、ログの出力先、etc)をすべて洗い直す必要がありました。
それをドキュメント化して手作業でステージング環境をつくるという手もあったのですが、
ドキュメントは完全ではない・自動的に再現できないという問題があり、いま自分が行った事を結局後の担当者にまたやってもらわなければならなくなるという問題がありました。
そこでChef化しました。
Puppetなど他のソリューションを使っても良かったのですが、弊社はRubyの経験が豊富で、サービス開発でも主にRubyを使っているエンジニアが多かったため、
RubyでかけるChefを使うことに意味がありました。

(執筆中...)

# 前提

* Chefの経験が(あまり)ない
* Chef専門エンジニアがいない

# 流れ

* 開発環境のChef化
* ステージング環境のChef化
* 本番環境のChef化

開発環境は必ずしも本番環境と同じOSやソフトウェアを使う必要はありません。
例えば、弊社の場合開発環境のOSは

* 各個人のMac OS X
* Vagrantで作成した仮想マシン上のUbuntu/CentOS
* 共用サーバ上のAmazon Linux

など多岐にわたります。
本番環境ではpostfixをメールサーバとして使っていますが、開発環境ではそういう縛りはありません。
(とにかくRailsアプリの動作確認に必要なメールが送信できればなんでもいい）。
そういうわけで、Chefレシピに対する要求も開発環境の方が少ないので、まず開発環境向けのChefレシピを作成して、
それを徐々に本番環境に対応できるように改良していく、というステップを踏む事をおすすめします。

<% dot do %>
  digraph {
      A [label="<div style='padding: 10px;'>A <span style='font-size:32px'>Big</span> <span style='color:red;'>HTML</span> Source!</div>"];
      C;
      E [label="A sink ほげ"];
      A -> B -> C;
      B -> D -> E;
      C -> E;
      A -> D [label="<div>A multi-rank <span style='color:blue;'>HTML</span> edge!</div>"];
  }
<% end %>
