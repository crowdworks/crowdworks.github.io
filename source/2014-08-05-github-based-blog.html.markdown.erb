---
title: エンジニアブログをMiddlemanでつくる3つの理由
date: 2014-08-05 16:00 JST
tags: middleman, github
gravatar: ykuoka@gmail.com
author: Yusuke Kuoka
twitter_id: mumoshu
---

みなさん、技術ブログの運用って面倒じゃないですか？ぼくは面倒です！
ネタを貯めて、記事を書いて、公開する。その一連の流れは会社的にも・個人的にも意味があり、
それプロセス自体も楽しいものです。
しかし、ブログエンジンやブログサービスを使っていると「もうちょっとなんとかならないか？」と思うことがあります。
例えば、以下のようなことです。

* 拡張できない・しづらい
* 使い慣れた言語とエディタが使えない・使いづらい
* 共同作業しづらい(Git & GitHubが使えない等)

もちろん、ブログエンジンやブログサービスには管理が簡単、すぐ使えるなどのメリットもありますが、
それにこだわらない場合はもっといい方法があるはずです。

私達はMiddlemanを使って軽く・モダンにブログを運用してこれらの問題を回避しています。
この記事では、Middlemanを使うことにした理由をご説明させていただきます。

技術ブログの運用に悩まされている皆さん、これから技術ブログをつくろうとされている皆さん、
ぜひこの記事を参考にして、Middlemanを使ってみてください！

READMORE

**目次**

<%= table_of_contents(current_page) %>

## Middlemanとは？

Rubyで書かれた、拡張性が高い静的サイト生成ツールです。
利用者がページのソースを好きな言語で書き、Middelmanがそれをビルド・デプロイします。
ビルドやデプロイの部分はプラグインで拡張することができます。

プラグインが対応しているものも含めると、以下のような言語に対応しています。

* Haml
* ERB
* SCSS/SASS
* CofeeScript

また、以下のような方法・サービスでデプロイできます。

* rsync
* ftp
* sftp
* GitHub Pages
* Amazon S3
* Rackspace Cloud Files
* Google Storage

## 採用の理由

クラウドワークスのエンジニアブログをMiddlemanで開発・運用することにした理由は、
特に以下の3つです。

* Rubyで書かれている
* 使い慣れた言語とエディタで記事をかける
* Git & GitHubが使える

### Rubyで書かれている

MiddlemanはRubyで書かれています。
そのため、私たちにとっては拡張しやすい、ということが採用の一つの理由です。

#### 拡張しやすい

私達はほとんどの開発でRubyを使っています。
Middlemanの標準機能で対応できないことが仮にあったとしても、いざとなれば使い慣れたRubyでMiddleman拡張を
開発するなどして対処できるので、安心感があります。

### 使い慣れた言語とエディタで書ける

Middlemanを使う場合、好きな言語やエディタで記事をかけることが、採用の一つの理由です。
ブログエンジンやブログサービスを使うとき、個人的に一番気になるのがここです。

#### 脳のコンテキストスイッチが最小化される

私たちの場合、技術ブログの記事は業務の合間に書きます。その場合、記事はサクッと書いたほうが断然いいです。

書くのに手間取ると、業務が差し込んできて、書けないまま数日が立ち、そうしているうちに記憶も色あせて、
余計に書きづらくなり、結局書かないまま数ヶ月すぎる・・・ということが起こりえます。経験ありませんか？僕はあります！
そうでなくても、時期的にホットな内容なら早く書いて、早く公開したいところです。

記事をサクッと書く一つの方法は、脳のコンテキストスイッチを最小限にすることです。
開発中に、普段開発に使っている言語やエディタですぐに記事を書いて公開できれば、それに越したことはないですよね？

ところが、ブログエンジンなどを使う場合、CoffeeScriptやSASSが単純には使えません。
手元でビルドして、スタイルの設定ページへコピペ・・・みたいなことをすれば可能ですが、面倒です。

また、使い慣れたエディタが使えない、使えたとしても、非公式なブラウザ拡張が必要だったり、「自分のエディタは対応してない！」といったことがあります。
エディタで書いてから、ソースをコピペする？
それでもいいのですが、コピペ後に記事を修正したくなったら、またエディタにコピペして戻す、といったことになって２度手間感がありますね。

Middlemanなら、使う言語やエディタは各個人の自由です。私もこの記事はMarkdown + ERB、エディタはAtomで書いています。

### Git & GitHubが使える

Middlemanを使う場合、ソースはGitなどで管理できます。
Gitで管理すればGitHubが使えます。

ブログエンジンなどでも、記事の執筆やシンプルな共同編集・レビューは問題無く行えます。
Git & GitHubが使えることによるメリットは以下のとおりです。

* GitHub上で公開前の記事をレビューできる
* 記事が不慮の事故で消えない
* CIと相性がいい

#### GitHubでレビューできる

クラウドワークスではGitHubを使って、公開前の記事をプルリクエストでレビューするプロセスにしています。
すると、GitHubのプルリクエスト上に公開前の記事に対するレビューコメントをつけて、レビューが完了したらマージ、ということができるようになり、レビュープロセスが可視化されます。
レビュー完了時のチャットへの通知なども、普段の開発でGitHubを使って行っているのと同じように実現できます。

#### 記事が不慮の事故で消えない

また、Gitで気軽にコミットできるので、うっかりブラウザバックして書きかけの記事が消えたり、エディタで予め書いておいてコピペする必要がありません。

#### CIと相性がいい

そして、CIと相性がよく、普段の開発で行っているようにブログもCIすることができます。
例えば、クラウドワークスのエンジニアブログの場合、

* 記事を執筆してコミットしgit pushしたとき、Werckerでビルドが走る。ビルドが通るとテスト環境に自動的にデプロイされる
* GitHub上で公開前記事のプルリクエストをマージすると、Werckerでビルドが走る。ビルドが通ると本番環境に自動的にデプロイされる

というようにCIを回しています。
特にHamlやSASSソースにシンタックスエラーがある場合にビルドが落ちてくれるので、
明らかに壊れたページを公開してしまうといったことを防ぐことができています。
その上、公開も自動化できるので、私たちは記事の執筆とレビューに集中することができます。

## まとめ

クラウドワークスでは以下の3つの理由から、エンジニアブログをMiddlemanでつくっています。

* Rubyで書かれている
* 使い慣れた言語とエディタで記事をかける
* Git & GitHubが使える

普段の開発でRubyを使っている、エディタや言語にこだわりがある、
GitやGitHubで執筆からテスト・公開までのフローを円滑にしたい・・・
そんな皆さんに、Middlemanをおすすめします！
ぜひ、この記事をきっかけにMiddlemanでブログをつくってみてください。
